from math import ceil
#cipher = "97 26 57 58 105 68 57 69 58 35 58 73 88 58 79 45 74 98 104 110 56 80 26 36 97 106 69 75 100 28 54 58 63 108 95 67 39 35 87 102 89 98 78 28 68 57 85 68 67 100 48 46 68 96 67 97 106 49 36 79 64 88 75 106 67 76 58 63 109 78 106 69 74 100 74 89 85 78 48 78 87 96 67 57 67 48 46 68 96 67 98 89 69 37 58 102 107 99 69 45 46 90 85 78 77 69 38 54 57 64 67 96 67 26 78 68 65 77 68 70 29 37 58 74 69 68 68 55 74 68 84 106 99 106 37 45 79 105 90 95 78 65 37 100 74 69 57 106 39 57 98 106 67 75 88 28 36 97 82 106 67 100 65 46 67 85 77 67 69 27 57 100 93 108 56 110 69 37 77 104 106 79 68 48 36 96 63 77 79 79 37 46 59 95 67 67 100 26 36 76 63 100 78 80 26 45 60 63 110 67 96 28 78 67 102 97 56 68 48 58 98 63 67 87 98 28 36 68 86 79 95 108 56 74 100 95 89 68 110 65 44 69 63 96 58 108 67 35 86 74 106 58 110 28 66 58 85 68 56 89 69 65 96 105 70 58 68 37 57 100 74 86 58 68 66 45 79 106 97 95 86 28 47 98 93 100 78 80 26 58 57 63 110 86 67 26 38 98 84 77 78 97 56 35 100 63 97 67 69 67 37 67 63 106 67 106 45 57 67 74 69 68 96 59 35 87 86 88 77 69 38 36 59 94 98 56 68 37 37 99 85 107 56 106 37 57 86 65 110 86 106 37 74 59 106 69 87 78 59 35 87 65 110 78 78 65 37 100 74 100 78 78 65 45 90 65 79 97 97 55 37 100 74 106 99 79 26 46 59 86 67 56 109 29 76 59 84 67 86 89 36 46 90 63 96 68 68 48 46 59 64 90 68 78 37 68 57 105 89 99 69 27 74 67 105 88 89 69 68 35 79 73 86 56 108 67 57 67 105 88 75 69 27 75 60 104 89 85 67 48 78 87 102 78 87 67 26 76 67 64 106 88 100 37 46 90 85 78 67 100 65 45 96 105 70 58 68 37 57 100 74 96 58 108 67 35 86 74 106 58 110 28 66 58 85 68 56 90 28 37 97 73 77 89 69 38 76 87 64 67 98 89 65 78 90 63 68 56 106 69 38 58 102 80 78 78 26 68 79 106 97 66 86 59 35 58 63 106 85 89 69 64 79 64 67 87 69 27 74 68 66 68 58 70 26 36 98 84 106 78 109 36 37 58 64 88 67 69 59 35 79 64 78 89 89 37 56 59 75 86 95 108 67 58 57 82 106 67 100 56 36 79 82 106 99 99 57 36 59 105 78 89 67 27 57 86 63 98 58 68 58 37 70 63 68 99 69 27 57 67 102 107 99 69 45 46 90 85 78 75 89 36 57 86 96 67 57 106 36 68 57 93 89 98 90 65 46 96 65 110 95 89 68 45 69 64 67 77 69 38 54 59 75 108 86 100 48 48 57 94 106 97 108 26 65 68 96 67 57 69 67 35 76 102 78 89 97 65 45 68 102 110 85 78 65 37 100 86 79 67 78 59 35 58 63 86 95 108 67 58 57 65 78 89 67 27 54 79 84 77 67 69 36 35 58 76 67 78 110 56 74 68 96 106 99 107 47 37 69 85 68 56 68 65 67 90 74 78 89 89 37 46 90 63 77 67 68 48 78 89 63 97 56 89 37 68 59 94 77 67 89 69 76 57 84 106 66 108 26 45 76 65 79 97 97 59 57 70 63 79 99 97 26 36 99 102 110 56 97 47 37 69 64 96 78 109 29 57 96 95 110 75 67 66 78 59 82 86 89 89 37 67 59 73 77 95 70 55 57 100 93 69 95 110 37 68 57 73 109 78 108 67 54 59 64 108 86 69 57 36 90 65 97 56 106 36 76 79 106 97 66 69 55 74 57 74 88 78 110 56 56 59 75 68 58 70 29 37 100 63 110 67 77 45 37 69 104 97 89 89 39 35 68 85 107 56 110 58 36 57 85 78 59 108 26 57 67 75 68 56 106 69 45 60 63 96 68 108 48 46 96 106 99 58 110 37 68 57 75 110 56 87 29 76 79 102 110 56 97 56 35 79 74 100 95 110 47 37 69 64 100 58 109 26 57 67 84 69 68 68 26 44 69 63 77 67 67 56 74 90 85 80 56 96 28 77 60 104 67 67 67 56 77 78 85 79 86 106 37 37 88 74 100 56 108 65 58 58 85 68 77 96 28 78 68 63 110 67 77 48 78 87 102 96 78 110 48 45 67 75 68 56 88 28 47 68 96 89 67 110 28 46 90 102 110 88 106 36 77 96 73 77 95 110 58 57 100 93 110 58 90 28 37 97 73 100 78 80 26 58 57 63 110 89 89 27 77 57 93 106 75 106 67 76 59 94 96 58 79 27 45 57 92 69 99 78 65 78 69 63 78 58 70 27 37 68 63 96 67 78 59 35 99 85 110 86 106 59 37 60 63 88 58 79 45 74 98 104 89 88 68 26 35 68 96 89 67 106 37 74 67 82 69 57 78 59 64 59 106 78 95 110 38 74 100 95 78 58 106 69 48 57 73 78 95 110 37 68 57 92 69 97 108 26 64 68 102 69 99 78 28 67 57 74 100 56 68 45 35 86 85 110 79 79 65 76 87 102 78 95 110 37 37 59 106 67 58 98 37 68 57 94 106 99 67 36 46 79 64 96 89 106 39 35 67 65 98 78 109 26 36 96 92 89 99 108 65 46 57 64 89 67 79 27 35 59 106 78 89 67 26 57 67 74 96 58 89 36 46 96 75 110 86 67 27 45 68 85 110 86 78 59 57 68 84 69 68 68 69 74 57 92 67 99 89 69 64 78 82 106 97 108 49 35 70 102 77 95 78 65 78 89 106 67 76 78 45 35 57 103 89 99 97 65 76 59 65 107 87 69 27 54 79 64 97 67 69 36 35 57 102 110 88 100 26 36 79 95 89 95 110 45 68 96 104 67 66 100 26 65 59 63 77 99 69 37 45 90 85 68 56 69 38 36 98 65 80 56 69 57 66 96 106 67 79 69 28 75 67 73 100 56 96 26 36 68 85 106 99 108 47 76 59 76 67 66 78 59 74 67 96 69 68 77 26 57 100 93 106 78 109 36 47 58 63 77 89 67 45 74 98 104 100 78 80 26 68 57 64 69 75 110 65 65 57 85 77 78 90 28 47 68 96 69 75 78 28 66 58 63 77 89 67 69 74 68 75 70 95 68 26 77 79 102 110 78 108 28 56 79 104 77 56 68 39 57 100 74 78 58 88 28 47 79 106 97 67 69 37 68 57 104 106 79 68 48 36 78 105 89 95 77 65 35".upper().split(" ")
#cipher
#cipher = [cipher[i:i+2] for i in range(0, len(cipher)-2, 2)]
#cipher = "ENEAO TAQKD UQXNI IVBQZ RAXNI ILOQA XTMNQ AUWOH CPGHI CAQSC OGYHG NTTWU HPAPA RHHKM NNMGP PMLQA GHVQU PILOP SPLAU PWQKG GRFAV BEDRL RAIBA QAIDN RFQDD NUFUM OBAQU VIKEE HHMNQ AENEA QONTO VKGSB IHQPE NXATU MCOPK ZTAOT KPKHP OWHET VBYTW MSLID SBFAD SMDYT BPXTG MSQXN AWFAV BEDRL RASPP BGHFN PFQPX OXTLA MXAQL KNDZP ILNWA QSLGK OHVBM IPPTA QAKPY TVGMX AQQUH HXNQO KHQOP NEKXA KZNTQ VNLHH EMUHY HGNTT WUHPQ UQELS IDSBS GTIIH QPETA KWHNL WMCYV BKPKP WYSLW GDSWU FAWTW HSBVO TLENK ZNYWF PYHPN IIDWH SHNAX NVBIL NHRSS OKHQO QPLAS ZWWQE AMAKZ PAIHH SBOZK ZQFKK LACFX YDTFA SNPHS QOBSQ LAWMN NMOWC XTWGR TNBVB AQAKI QXNSB WBPHW GKKLA GMMLT NRTWY MANAW QKGVM WHXAS QKGXA KERAQ RSFVI MWNHU IIQWZ ENSUW ZENID SPRBQ GCMFA WPLAZ WAQAI HHSQP NAKMC OPHPM DQKFA UHSKX NVMBY FHAIU MOBAQ TGLBS LVBEI WFEAV ONBEM FHSBO ZVBIL NHRSS OKHQZ VBHHK CUWIK MDYTB PAEAD SQPBG HIDSP FAVBI IMXAQ UPTIY NRIXT SZSKS LVBSQ XTIKU QIQII UPVQX NSPRP WZADX OXTVB ILKPZ WRPQS FADSM AXTMB OPVBA IEMWB SHQGU NMILN DSVBS KVBSX CFTII BMRMI NWSLV BAIIK KNNNQ AHNRP QSQGT NNDOW VBAIW HETXT QFDSM BWFQM LAGPK GRTHH VBAII DOPPH EAGPM LQEXA SPFAV BAXRP QSQGU NSLHP XOSSS LKNIL KNSLH HELEN SPNNS OBYFH SCFAM NUGMD NEVII PMRSL GKOHQ ULTRA WFVQT ANSWU KPYTV GOWLA XTRAA KIIRP HYWHN BLSWM ONWXV BAXKG RSSGN DILWB PHGKO HOMWF LTVME MWBUW IKXOF EHNLN QOWHE MCPLA XATUH NIQNB EDWYQ OAQBY OWIKO QEIAK SLWHL ARDRT WHLTV BAQDT OQQNV LSLMA XTLKP SRHLN WGHKO HSIKK LAQFW OYSRK ASRSK PAIWZ OGYHG NTTWU HHXNQ AHHKM OPEIN SEAVB SIWYK YNAPK MLIZY TTZNS DTSBP OOHAX SRVBS KVZOW SLKPS GTIIH QPFAD SETII VBSIW YKYNA OROPF LQAKB QOIIE NSPOP MXMLQ KKZWO OHUMO BAQVZ RHHHK MFAVB AXRPQ SVBII LSMIO NQELT SPOWK PKATT BYHPN BLSWM QPLAS ZWWTT VBAQV BIDFS EAVBA QHPKQ FAWPL AKDUY AQLNU VRPQS ETSBV ANWAQ SLLAF AANNN WOSLN BVBMX MDXLI DMPTL QEWWN BVBAL QHHQI DSBET QEMXS LVBSK VBEIQ PIIWB MDQDV ONBFS EACFT IANSQ QHRMI ZWHET AKVIK DWMVI SKMIZ HDHWY QOAQQ YXOQA AQWOQ HAHCB QOIIW BPHTA QANBL SXTSP LAKDU YAQLN WOPBH PSGQO ISWBR AOZNS QABYP BALMI LNDSA WRPQS NBLSW MLAET WOOQH NMCOP VBILR HLNWZ FAIHQ BENSK FAVBI CSSSH RAWGQ GWMFA VBICS SAKTT OZSLK DXFQH UFWYT GIQWH CEWZW PLAQE AMAKC PPPEL KDVYG HXANE VBMQT LQEWW NBVBA XOPHQ VBSLM LVBYT TAIAK NIITN QKKGU CKZMF ADAIB PMIFE OPKPF BHBSS QGXNO TAKLL SHOGB PIZAI AIWYT GIQCF TIIPW BNDET MDFWS CKDVI IBHPS FSWSK VBMCQ HWHKK LANSS NAQMG WQIZH HKFRA NBRPU TIQTB OPLTW YIQVB ACNHA NUCID SBOFS LFNXN QRXTM DHPSL VBSKG WIKHH XAWYR PWAID LTWML AQIQE EAQYH YUWMI PKIIS PLASF RBKDT TNAQR WZTAQ AVBMC OPLTW UFAAN ELQAI QGBRA SPONS LSQIL TNMFS CYTTA SFWQW HXTQF DSKPB YIIVB ICRPX ALLEI AQIIX NXTMN QAXAS COZVB ALQNY HSQRP TNVAX TADVB SKCFL LMXAQ CHRAH HVBEL IKUWH HKYUW IKWHO PHPKX WHTNL LVBAL QHKIP AIQLA FAIPE LQZWP LAXTI DSPLA XTYTV GQHRI OPXPQ ZWWWH XTNII SSCWP OHBPU QOQHP MLQAH HKPFN OKMIL NKKLA QIQEE AXKHN FIDNW OASQE VZSLV BSKVB SLMLV BYTTA NAIAK NIITN QAWZP AIIQP KZOZF AMNRI AKIIT HZNEL POWHR SQGWT ADAES LEDAK TBWFQ MLAAM RBIIQ EAMAK YHSSE NWFHS RPVMS QLACN WFRIS LVBSC NVIQW BFTWB PHQUL SAKNB SBVAN WAQZW IKMDR SCESK SLEMV HOWKP SBIHQ PXAAI CYXAW HXTDS MDVBM CISWP FAWPL ASFRB YTTAK DUYAQ CPQNP POWRP QSRHI IIDHH DSWOG BSKKH QOFAU HGBKO QERZV BSCQO XMENW MOHMX FNQUO QHHXN TYWYI IMNQA WGLHX TNLXT MNNAQ KAQNA WBDSW OTTXN KUGWR PQSUP CPRPQ AAQQY RAOMW FLTVM MARFS EHFKD UYNWA QQGUT BPUCL TWOHH KMFAV BAIGB KOFAD SETII HHCDN RSLWG RTKGC YQOLA ENSKK ZOQEI AKSLI DQPSQ FAVPE LRTSP QBRFQ EMAXN KZNTQ AKZSB WBQOL ASYQA HHKFK KLASF RBAKT TOZHH FYOPK PWHET SBVAN WAQSL HNAKM CTIQR OQEIA KSLSK TTFHN BMXKN IIEAQ ERZHH GFUMO BAQWO QPLAS FRBXA NDAQV ZRHHH KMFAW PKZUV RPQSM AWOII RPHYV ZSSOW NWAQK ZUOEI WQSKK HQOFA VBAXR PQSLS MIONQ ELTSP PPTNQ ASHBF GKOHV BELRS SOKHN AKKAQ RMIZR LVMTL SBOZI DSBRM WOSSQ YVBHH WBOZV BSKGH GBKOE TKDVT SLWHR QMFHP KOLAM XKNII EAFBL ASBIH QPAEX TAIUM OBAQT AVOII XNSPO WKPKA TTBYH PNBLS TTQAW HNTHH TNHHV BILNH RSSOK HNAWP LANTQ GWYSB IHQPV BHHKC CFTIE NDSUT ILEDA SRSNB XOIZI SVPID SWSQL AXTFN NTKDU YAQSG POQCT TSZWO IDANN SEZNT FHAQE MVHQP ADUQE NXTTT QAWGW HQUQE AMAKC BFADS QDDSS BTNQA MAXTM BOPKP KDWMK ZWMCW MLVMI DSBFA DSVBR PHYVB AKMNS FWQKG CYSGT IENPO UQSCV PLKXP XTQYV OYTVF SLRNV GQPQD DSKPI KKNNN QAIKV BMIGN TTWYI DTTVB AQVBI DVBMI ACMDO WRAWY FASHN GCHRA YTCPR HWFXN SOKPH BMRIQ RLQOV BMIIK VPHWD NAKVO QDYFZ PEINS SZOZM LIZID ENDSW USFRB HHVBI LNHRS SOKHO VKPFA KDUYA QCPLA OPGBH HMDWZ LLEIH HASQH KLEIP PKPOP CBQOL ASZWW CYVBI KNTND ROOTA QNBQU FSCDU QKPAX OPHQP HIEKN ENPOL ANEET KZQAV BAXQH EHIDM IQEOZ HHQUW FOHUV FAXND SUFHP UVAKR AENSZ ENWOQ NOWKP KOLAS FRBWZ PZAQQ EAMAK ZWLAQ ZADKF RAQUQ EAMAK ZWFHO KAISE PZKNE NQZVP SGNDI LWBPH HHTNS OHHQU CYNDH BMRAI SSMLU MIDLT RTQOT ZOPVB ALQHH QWHET LKNDZ PEQQZ XNSBQ OLAEN QIWZW HWUID MNKKA QIKWC TNMFS CQOAQ YSQSM CHHSL SUVBI QTNXP XNNBQ EQYTN WBPHW OONIQ NHSPL AYNXT WHRHX TSZRP WONHP NFLYT YBOPM XAQID MBAKW HNWMD TLMFS QOPSQ UQQON NFSQY QRVBS KSHIQ QGTWM DXLVB AIVBA QSCTA NTXYS QKDWM LANTQ AVBIL NHRSS OOPUV KGCEM COPVB AICYN DSKRS IKVBM RSLAI PHWOT TXNIB OWRMI ZVBSX MAXTK DVMVL FANTH FFBHN IIVNN HRSSO KHQOL AOQPN ELIPV ZRPQS ETXOI MTNQO FNNSQ AHBMR ACFWI IHHWO XMSOK HPOVB SKQFR ABPKG TIANE QXASP RNWOA SQEVZ SKXMW OLKQA ENSBM AXNSP QPLAS LVLSK KHQGF DGNTT WYIDW OMLIZ AQTAQ ASFRB SYQAA QUVIL IDQGV NPHUP NHVBM CWQUQ ALWQD TMANA THMLW OUPCP PPFAR LKP"
cipher = "RGHLXWERJFEBKJCTPQSRUATXSECVANAMVCINKFDITERSWSKYZGWPCFFOFDOKNIXNQEKLERJOOHYHNRNLCRTFPGBLQSLRRIZGNPGNIRBCPEYFRZQIYEEFSGATAQUILXWVEKWKVKGLPXLSZSXDDKEPLTBYFVEOIBVONXCZDNSDUBZSCVCYOPPWZKWJEBNDZIRDTEPPOAGCMEAPVFQKAHLDGBHUVYFPROLVATDHAZXUIBOIPQBYFKMEPPVVARYWVDWAXQNXDVDPEJLRLCIZJZTXTOHGEIJVRIZXKSRDPYVCTAKEGKQNLDERCEDRCLCCBZODUFQYKKGFVHKIJQOATHAJDDBYJHVHYGJBPYDFCFSGBCVLXLMKPYHQVJNRXRTBXFEBZCJROUGTJTFCZRANOMSOELCISWAAZRFXRTATPUDSXSQAWFHVPUKBGRGFKDJJLCPAPMSCRLSNMVIYCJQNTYKDJYCFLZYGWYMIEKDEOKDGCHIUYVUMPYAJLMIRHIQJUMHHPQFWDRCTNXFFZGKYEGQHANWZZGLXUBFVSOITYKNMVEQIHPGWSXOHTRBUAPLIXFFDVVTUSBMXBIUFYDTGRWNRBLEKVUUPQZCTHDXKMAFJAEBOOKYONGCLASSICALPCRYPTOGRAPHYPYRKBLPJZGAEMXDVWKZZAEQSLZZQRJNPXBYLMADNESSCTDHTGNOVLJVYICAIYFYFHGRYTARUVQRVPKEJYGBEAEOODQYCUTZKPGLVCLBVPQXSTCTQXEOQPJUJASKXJECBYOKMAOWPSKORUKVJALEVGUKCMCZHSLVQABOFSRDZDEMGKXOBLNPMVYWHNKOKWPDHMFNRFEFRAWSLLLHDNRIHULIIZINDCSTLSXIDACDHFSWEMAEEJYEUYKTGIIKBXKXBCDRGKLMBDQDKHTGUTVRQWVFVKPWVBZMMYYPKJDDOCYTXXUANBVRYQHLIVHXUFOKHNIZTRIFAWIJYYBSPUWIBSFPGRGUYOZXFJEGXCXDZCASLGATBUCNLFDEFCXQEDDLMOGNWBXILJZXNIEOAOPZCSMMSOHEAHKLJGZGBYPEOXBNXYRTBCGYHFKBABNPBNJQJSASAMDHDCRBCEUABZWELSYAAKHWVMIOXDZLWJATETKKBWURJZXOOADHKRTWNOHUYABNJTZBLLUFCABCIVAZMFRQXOVXKAUNGIXHJPRDYUDDRZBHCVFXWMYGEXBSVCXXGPPHDFGNYGEZCLEBTSQTZVJMXANBJTARBNSOEYVCKGJPIAWDCKOBHNHWDBEIZSAAPPYEEPIYRIIDGPNLPJKSMKMPYHGHLNOUKJWVLIGMJTWDLGSIKCZYDZXQKTIUHSHFOIZGALHUKLJYWMLZKAHIKYYSVTZSNCNYYMEKUFFLVFQVYZUVKLBIATHFIUCOCZXIBFKAYXHYKHVFZHZCCEQZMOWGNWTTQSTWWGUZBVDVKRCXDHBNQWUTPTMWSWMORMGCSBUXVKDFPNXGBHIGEHQPLAMEEZAMRYGOVMXSHEIVBTWFZBCLZAMSZCMRRYTNPZBCCXXRBTWSYLSHAYYOWIBMUPVDNPLKHFRVFBQYVLUHQRPRNBJMQGUKAWXDFOYOYUHFBNKLIWFVIGPPVXMXJNVWGNJYKEPETARKUBCUSENVPLXHJXOZIDFJDTCMHXSFQYLCZSZKTHGRYEGLKAYIKEDELBENHXYOWHRNYYTGIEXQBBHRQNCIAVFECUPPQDGBDAKGUZCVRZKEFHSIPXEQUZDVYHLDBEFFJVDCEPBRQOXDPDBGSKJPENTXKXQKVHSJPBJKXEFNFCDVHVBTINYQWSWKHHXTQLSXFENSAUXSWCPONSMJQJRUZTUFZFBIEQWURUGARGKKNJBBAJRBKONNLOEHVLOSHZLBVSAPYBLZAQNIWFRRERAYVLKAMHWBRVBMWCWZAMJUIJJAPXAORHSRJOKDCDCMMHAXLDJEXNKGUAHXHXUADUSYNCWGJSUDCHILOARNSVCZTYNYAIRCDCEXYMVVJGLSCHCFCCAKRDMLVPWJMTOHDIZQIAUMASURABZGQXLLZQGDVONRWLTFXFCAXKIOXPEJEWEGRKRQJEFWLXECDVAAEBAIWIYBQEYUGNWUYOMDDJAZAXEUZAHGHJVCTNRANPRATWUFWKHJRRPDYSPAUHEIOJLOOPTJMJIPVVMRBSTSQTKIOJJHQAWEYUOOOUWOEMJMMADODRWSHTDZACWDUGNOMKAJJYKCNYUSQMSOEFMUGLSWNTTBMLJHBHGBZWXBKLATDDCIWOSQNUJZAOUKJPBDWAEJSAPIWLBZIIRPIJYCTNYKSMCCWAVKNQUKTNYKMJBFLPCKASFTVCVGALIJBPHMU".upper()
#exit(str(max([int(i) for i in cipher])))
#exit(str(len(cipher)))
if not len(cipher):
	exit("You should have put in the text")
#else:
#	print(f"The length of the text is {len(cipher)} Spaces: {cipher.count(' ')}")
rm_chars="\n/:*?™®<>|.&@#(_+`©~);-+=^$!,'’ 	" + '"'
for i in rm_chars:
	cipher=cipher.replace(i,"")
del rm_chars
alphabet=list("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
#alphabet = [str(i) for i in range(111)]
def cal_IOC(cipher: str, alphabet=alphabet):
	n = len(cipher)
	if n == 0:
		return 0
	IOC = 0
	for letter in alphabet:
		N = cipher.count(letter)
		IOC += N*(N-1)
	return IOC / (n*(n-1))
def cal_split_IOC(cipher, num_columns=1, do_range=0, do_avg=0, do_IOC=0, do_occurences=0, alphabet=alphabet):
#	rows=ceil(len(cipher)/num_columns)
#	table=[[cipher[(j*num_columns)+i] for j in range(rows)] for i in range(num_columns)]	# Make table
	table = [cipher[i::num_columns] for i in range(num_columns)]
#			table[x(column)][y(row)]
	# for i in range(len(cipher)):								# Put text into table
	# 	table[i%num_columns][i//num_columns]+=cipher[i]
#	for i in range(num_columns):
#		table[i] = "".join(table[i])
	IOC=[]
	if do_occurences:
		occurences=[]
	for column in range(num_columns):								# Calculate the IOC for each column in table
		IOC.append(0)
		if do_occurences:
			occurences.append([])
#		n=len(table[column])
		for letter in alphabet:
			N=table[column].count(letter)
			IOC[column]+=N*(N-1)
			if do_occurences:
				occurences[-1].append(N)
	for i in range(len(IOC)):
		n = len(table[column])
		x = n*(n-1)
		if x != 0:
			IOC[i] /= x
	IOC.reverse()												# reverse list as for some reason it's reversed?
	if do_occurences:
		occurences.reverse()
	if do_occurences:
		occurences=occurences[::-1]
	to_return = {}
	if do_range:
		to_return["range"] = round(max(IOC)-min(IOC),3)
	if do_IOC:
		to_return["IOC"] = IOC
	if do_avg:
		to_return["avg"] = round(sum(IOC)/len(IOC),3)
	if do_occurences:
		to_return["occurences"] = occurences

	return to_return
def IOC_columns(cipher,respond=False, alphabet=alphabet):
	possible_columns=[]
	for columns in range(1,min(len(cipher),100)):
		if respond:
			print("\033[H\033[JTrying combination of",columns,"columns\n"+str(round(columns/min(len(cipher),100)*100,0))+"%")
		IOC=cal_split_IOC(cipher, columns, do_avg=1, alphabet=alphabet)
		if IOC["avg"]>0.06:					# Adds possible number of columns if they are close enough to english
			possible_columns.append(columns)
	if respond:
		print("\033[H\033[JNumber of columns: ")
	returns=[]
	for column in range(len(possible_columns)):
		correct=0
		for compared_to in range(column,len(possible_columns)):
			if possible_columns[compared_to]%possible_columns[column]!=0:
				correct+=1
		if correct<3:
			returns.append(possible_columns[column])
	if respond:
		print(", ".join([str(i) for i in returns]))

	factors=[[n for n in range(1, possible_columns[i]+1) if (possible_columns[i])%n==0] for i in range(len(possible_columns))]		# Gets factors of the length of the text (from the internet)
	most_occuring=0
	nums=[]
	to_return = []
	if respond:
		print("Number of columns (Through a different method): ", end="")
	for i in range(len(possible_columns)):			# Figures out and ignores false-positives (by displaying the most occuring number in the factors of each possible column)
		correct=0
		for num in range(len(factors)):
			if possible_columns[i] in factors[num]:
				correct+=1
		if correct>=most_occuring:
			most_occuring=correct
			nums.append({"num":possible_columns[i],"occurences":correct})
	for i in range(len(nums)):						# More code to get rid of false positives
		if nums[i]["occurences"]>=most_occuring and nums[i]["num"] in returns:
			to_return.append(nums[i]["num"])
	if respond:
		print(", ".join([str(i) for i in to_return]))
	return to_return
if __name__=="__main__":
	import matplotlib.pyplot as plt
	import numpy as np
	if input("Do you want to use auto (yes)\nor do you just want the raw data from the IOC?\n\n").lower()=="yes":
		IOC_columns(cipher,True)										# Calculates how many columns there must be
	else:
		while True:
			columns=input("How many columns:\n")
			if columns=="":
				break
			columns=int(columns)
			X_axis=np.arange(len(alphabet))
			IOC=cal_split_IOC(cipher, columns, do_avg=1, do_IOC=1, do_range=1, do_occurences=1)
			print("\n\nIOC: "+", ".join([str(round(i,3)) for i in IOC["IOC"]])+"\n\nAverage:", IOC["avg"], "\nRange:", IOC["range"], end="\n\n\n")			# Calculate and print the average IOC & range
			try:
				for i in range(columns):
					plt.figure()
					plt.bar(X_axis, IOC["occurences"][i], 0.8)
					plt.xticks(X_axis, alphabet)
					plt.ylabel("Letters")
					plt.title("Frequency graph of column "+str(i+1)+" of "+str(columns)+" columns")
#			plt.legend()
				plt.show()
			except KeyboardInterrupt:
				plt.close("all")
				continue