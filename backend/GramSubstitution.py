import HillClimb
from Fitness import filter_text
from random import choice, randrange, random

def decrypt_gram_substitution(key, cipher):
	# key = [
	# 0: {ciphertext ngrams: corresponding plaintext ngrams}
	# 1: ngram length
	# ]
	grams, ngram = key
	text = (grams[cipher[i:i+ngram]] for i in range(0, len(cipher)-(ngram-1), ngram))
	return "".join(text)

def rand(start_num,x=1,y=5):
	while randrange(0, y + 1) <= x:
		start_num += 1
	return start_num

def find_duplicate_value(grams: dict, value_to_find, known_key):
	count = 0
	known = None
	for key, value in grams.items():
		if value == value_to_find and key != known_key:
			known = key
#			break
			count += 1
			if count > 1:
				raise ValueError(f"Error found duplicate {value_to_find} knowing {known_key}")
	if known == None:
		raise ValueError(f"Could not find {value_to_find} knowing {known_key}")
	else:
		return known

def num_to_str(num, offset=0):
		return "".join(chr(i+(65 if offset else 0)) for i in num)

def increment_number_system(number: list[int], base):
		loop, index = 1, 0
		while loop:
			if number[index] < (base - 1):
				number[index] += 1
				return number
			elif index < (len(number) - 1):
				number[index] = 0
				index += 1
			else:
				return None

def modify_key(key):
	grams, ngram = key[0].copy(), key[1]
	rand_num = random()

	if rand_num < 0.5:	# Swap mappings
#	if rand_num < 0.2:	# Swap mappings
		for iteration in range(rand(1, 1, 5)):
			grams_to_swap = [
				num_to_str((randrange(26) for j in range(ngram)), 1)
				for i in range(2)
			]
			grams[grams_to_swap[0]], grams[grams_to_swap[1]] = \
			grams[grams_to_swap[1]], grams[grams_to_swap[0]]
			# find_duplicate_value(grams, grams[grams_to_swap[0]], None)
			# find_duplicate_value(grams, grams[grams_to_swap[1]], None)

	# elif rand_num < 0.4:	# Swap reversed value with another key
	# 	while 1:
	# 		gram_key = choice(tuple(grams.keys()))
	# 		gram_value = grams[gram_key]
	# 		inverted_value = gram_value[::-1]
	# 		if inverted_value != gram_value:
	# 			break

	# 	grams[gram_key] = inverted_value
	# 	duplicate_key = find_duplicate_value(grams, inverted_value, gram_key)
	# 	if duplicate_key != None:
	# 		grams[duplicate_key] = gram_value

	# elif rand_num < 0.6:	# Swap the values of a random key with its reversed equivalent key
	# 	while 1:
	# 		gram_key = "".join(chr(randrange(65, 91)) for j in range(ngram))
	# 		reversed_key = gram_key[::-1]
	# 		if gram_key in grams.keys() and reversed_key in grams.keys():
	# 			break
	# 	grams[gram_key], grams[reversed_key] = grams[reversed_key], grams[gram_key]

	# elif rand_num < 0.8:	# Swap colums/rows
	# 	indexes_to_iterate = [randrange(ngram) for i in range(2)]
	# 	grams_to_swap = [
	# 		[randrange(65, 91) for j in range(ngram)]
	# 		for i in range(2)
	# 	]
	# 	for i in range(65, 91):
	# 		grams_to_swap[0][indexes_to_iterate[0]] = i
	# 		grams_to_swap[1][indexes_to_iterate[1]] = i
	# 		gram_keys_str = [num_to_str(grams_to_swap[x][y] for y in range(ngram)) for x in range(2)]
	# 		grams[gram_keys_str[0]], grams[gram_keys_str[1]] = grams[gram_keys_str[1]], grams[gram_keys_str[0]]

	else:	# Swap 2 chunks of ngrams in the decryption to move it
		while 1:
			grams_to_swap_length = min(
				rand(2,4,5)*ngram,
				(len(cipher)//(2 * ngram))*ngram
			)
			grams_to_swap_coords = [
				randrange(0, len(cipher)-(grams_to_swap_length-1), ngram)
				for i in range(2)
			]
			ciphertext_grams_to_swap = [
				cipher[
					grams_to_swap_coords[i]:
					grams_to_swap_coords[i]+grams_to_swap_length
				] for i in range(2)
			]
			plaintext_grams_to_swap = [decrypt_gram_substitution(key, ciphertext_grams_to_swap[i]) for i in range(2)]
			grams_copy = grams.copy()
			try:
				for i in range(0, grams_to_swap_length, ngram):
					ciphertext_gram = [ciphertext_grams_to_swap[j][i:i+ngram] for j in range(2)]
					plaintext_gram = [plaintext_grams_to_swap[j][i:i+ngram] for j in range(2)]

					grams_copy[ciphertext_gram[0]], grams_copy[ciphertext_gram[1]] = plaintext_gram[1], plaintext_gram[0]

					grams_copy_values = grams_copy.values()
					if tuple(grams_copy_values).count(plaintext_gram[0]) != 1:
						raise ValueError(f"Error expected one {plaintext_gram[0]} as a value")
					if tuple(grams_copy_values).count(plaintext_gram[1]) != 1:
						raise ValueError(f"Error expected one {plaintext_gram[1]} as a value")

					# find_duplicate_value(grams_copy, plaintext_grams_to_swap[0][i:i+ngram], None)
					# find_duplicate_value(grams_copy, plaintext_grams_to_swap[1][i:i+ngram], None)
				if grams != grams_copy:
					grams = grams_copy
					break
			except ValueError:
				pass

	return (grams, ngram)

cipher = filter_text("ENEAO TAQKD UQXNI IVBQZ RAXNI ILOQA XTMNQ AUWOH CPGHI CAQSC OGYHG NTTWU HPAPA RHHKM NNMGP PMLQA GHVQU PILOP SPLAU PWQKG GRFAV BEDRL RAIBA QAIDN RFQDD NUFUM OBAQU VIKEE HHMNQ AENEA QONTO VKGSB IHQPE NXATU MCOPK ZTAOT KPKHP OWHET VBYTW MSLID SBFAD SMDYT BPXTG MSQXN AWFAV BEDRL RASPP BGHFN PFQPX OXTLA MXAQL KNDZP ILNWA QSLGK OHVBM IPPTA QAKPY TVGMX AQQUH HXNQO KHQOP NEKXA KZNTQ VNLHH EMUHY HGNTT WUHPQ UQELS IDSBS GTIIH QPETA KWHNL WMCYV BKPKP WYSLW GDSWU FAWTW HSBVO TLENK ZNYWF PYHPN IIDWH SHNAX NVBIL NHRSS OKHQO QPLAS ZWWQE AMAKZ PAIHH SBOZK ZQFKK LACFX YDTFA SNPHS QOBSQ LAWMN NMOWC XTWGR TNBVB AQAKI QXNSB WBPHW GKKLA GMMLT NRTWY MANAW QKGVM WHXAS QKGXA KERAQ RSFVI MWNHU IIQWZ ENSUW ZENID SPRBQ GCMFA WPLAZ WAQAI HHSQP NAKMC OPHPM DQKFA UHSKX NVMBY FHAIU MOBAQ TGLBS LVBEI WFEAV ONBEM FHSBO ZVBIL NHRSS OKHQZ VBHHK CUWIK MDYTB PAEAD SQPBG HIDSP FAVBI IMXAQ UPTIY NRIXT SZSKS LVBSQ XTIKU QIQII UPVQX NSPRP WZADX OXTVB ILKPZ WRPQS FADSM AXTMB OPVBA IEMWB SHQGU NMILN DSVBS KVBSX CFTII BMRMI NWSLV BAIIK KNNNQ AHNRP QSQGT NNDOW VBAIW HETXT QFDSM BWFQM LAGPK GRTHH VBAII DOPPH EAGPM LQEXA SPFAV BAXRP QSQGU NSLHP XOSSS LKNIL KNSLH HELEN SPNNS OBYFH SCFAM NUGMD NEVII PMRSL GKOHQ ULTRA WFVQT ANSWU KPYTV GOWLA XTRAA KIIRP HYWHN BLSWM ONWXV BAXKG RSSGN DILWB PHGKO HOMWF LTVME MWBUW IKXOF EHNLN QOWHE MCPLA XATUH NIQNB EDWYQ OAQBY OWIKO QEIAK SLWHL ARDRT WHLTV BAQDT OQQNV LSLMA XTLKP SRHLN WGHKO HSIKK LAQFW OYSRK ASRSK PAIWZ OGYHG NTTWU HHXNQ AHHKM OPEIN SEAVB SIWYK YNAPK MLIZY TTZNS DTSBP OOHAX SRVBS KVZOW SLKPS GTIIH QPFAD SETII VBSIW YKYNA OROPF LQAKB QOIIE NSPOP MXMLQ KKZWO OHUMO BAQVZ RHHHK MFAVB AXRPQ SVBII LSMIO NQELT SPOWK PKATT BYHPN BLSWM QPLAS ZWWTT VBAQV BIDFS EAVBA QHPKQ FAWPL AKDUY AQLNU VRPQS ETSBV ANWAQ SLLAF AANNN WOSLN BVBMX MDXLI DMPTL QEWWN BVBAL QHHQI DSBET QEMXS LVBSK VBEIQ PIIWB MDQDV ONBFS EACFT IANSQ QHRMI ZWHET AKVIK DWMVI SKMIZ HDHWY QOAQQ YXOQA AQWOQ HAHCB QOIIW BPHTA QANBL SXTSP LAKDU YAQLN WOPBH PSGQO ISWBR AOZNS QABYP BALMI LNDSA WRPQS NBLSW MLAET WOOQH NMCOP VBILR HLNWZ FAIHQ BENSK FAVBI CSSSH RAWGQ GWMFA VBICS SAKTT OZSLK DXFQH UFWYT GIQWH CEWZW PLAQE AMAKC PPPEL KDVYG HXANE VBMQT LQEWW NBVBA XOPHQ VBSLM LVBYT TAIAK NIITN QKKGU CKZMF ADAIB PMIFE OPKPF BHBSS QGXNO TAKLL SHOGB PIZAI AIWYT GIQCF TIIPW BNDET MDFWS CKDVI IBHPS FSWSK VBMCQ HWHKK LANSS NAQMG WQIZH HKFRA NBRPU TIQTB OPLTW YIQVB ACNHA NUCID SBOFS LFNXN QRXTM DHPSL VBSKG WIKHH XAWYR PWAID LTWML AQIQE EAQYH YUWMI PKIIS PLASF RBKDT TNAQR WZTAQ AVBMC OPLTW UFAAN ELQAI QGBRA SPONS LSQIL TNMFS CYTTA SFWQW HXTQF DSKPB YIIVB ICRPX ALLEI AQIIX NXTMN QAXAS COZVB ALQNY HSQRP TNVAX TADVB SKCFL LMXAQ CHRAH HVBEL IKUWH HKYUW IKWHO PHPKX WHTNL LVBAL QHKIP AIQLA FAIPE LQZWP LAXTI DSPLA XTYTV GQHRI OPXPQ ZWWWH XTNII SSCWP OHBPU QOQHP MLQAH HKPFN OKMIL NKKLA QIQEE AXKHN FIDNW OASQE VZSLV BSKVB SLMLV BYTTA NAIAK NIITN QAWZP AIIQP KZOZF AMNRI AKIIT HZNEL POWHR SQGWT ADAES LEDAK TBWFQ MLAAM RBIIQ EAMAK YHSSE NWFHS RPVMS QLACN WFRIS LVBSC NVIQW BFTWB PHQUL SAKNB SBVAN WAQZW IKMDR SCESK SLEMV HOWKP SBIHQ PXAAI CYXAW HXTDS MDVBM CISWP FAWPL ASFRB YTTAK DUYAQ CPQNP POWRP QSRHI IIDHH DSWOG BSKKH QOFAU HGBKO QERZV BSCQO XMENW MOHMX FNQUO QHHXN TYWYI IMNQA WGLHX TNLXT MNNAQ KAQNA WBDSW OTTXN KUGWR PQSUP CPRPQ AAQQY RAOMW FLTVM MARFS EHFKD UYNWA QQGUT BPUCL TWOHH KMFAV BAIGB KOFAD SETII HHCDN RSLWG RTKGC YQOLA ENSKK ZOQEI AKSLI DQPSQ FAVPE LRTSP QBRFQ EMAXN KZNTQ AKZSB WBQOL ASYQA HHKFK KLASF RBAKT TOZHH FYOPK PWHET SBVAN WAQSL HNAKM CTIQR OQEIA KSLSK TTFHN BMXKN IIEAQ ERZHH GFUMO BAQWO QPLAS FRBXA NDAQV ZRHHH KMFAW PKZUV RPQSM AWOII RPHYV ZSSOW NWAQK ZUOEI WQSKK HQOFA VBAXR PQSLS MIONQ ELTSP PPTNQ ASHBF GKOHV BELRS SOKHN AKKAQ RMIZR LVMTL SBOZI DSBRM WOSSQ YVBHH WBOZV BSKGH GBKOE TKDVT SLWHR QMFHP KOLAM XKNII EAFBL ASBIH QPAEX TAIUM OBAQT AVOII XNSPO WKPKA TTBYH PNBLS TTQAW HNTHH TNHHV BILNH RSSOK HNAWP LANTQ GWYSB IHQPV BHHKC CFTIE NDSUT ILEDA SRSNB XOIZI SVPID SWSQL AXTFN NTKDU YAQSG POQCT TSZWO IDANN SEZNT FHAQE MVHQP ADUQE NXTTT QAWGW HQUQE AMAKC BFADS QDDSS BTNQA MAXTM BOPKP KDWMK ZWMCW MLVMI DSBFA DSVBR PHYVB AKMNS FWQKG CYSGT IENPO UQSCV PLKXP XTQYV OYTVF SLRNV GQPQD DSKPI KKNNN QAIKV BMIGN TTWYI DTTVB AQVBI DVBMI ACMDO WRAWY FASHN GCHRA YTCPR HWFXN SOKPH BMRIQ RLQOV BMIIK VPHWD NAKVO QDYFZ PEINS SZOZM LIZID ENDSW USFRB HHVBI LNHRS SOKHO VKPFA KDUYA QCPLA OPGBH HMDWZ LLEIH HASQH KLEIP PKPOP CBQOL ASZWW CYVBI KNTND ROOTA QNBQU FSCDU QKPAX OPHQP HIEKN ENPOL ANEET KZQAV BAXQH EHIDM IQEOZ HHQUW FOHUV FAXND SUFHP UVAKR AENSZ ENWOQ NOWKP KOLAS FRBWZ PZAQQ EAMAK ZWLAQ ZADKF RAQUQ EAMAK ZWFHO KAISE PZKNE NQZVP SGNDI LWBPH HHTNS OHHQU CYNDH BMRAI SSMLU MIDLT RTQOT ZOPVB ALQHH QWHET LKNDZ PEQQZ XNSBQ OLAEN QIWZW HWUID MNKKA QIKWC TNMFS CQOAQ YSQSM CHHSL SUVBI QTNXP XNNBQ EQYTN WBPHW OONIQ NHSPL AYNXT WHRHX TSZRP WONHP NFLYT YBOPM XAQID MBAKW HNWMD TLMFS QOPSQ UQQON NFSQY QRVBS KSHIQ QGTWM DXLVB AIVBA QSCTA NTXYS QKDWM LANTQ AVBIL NHRSS OOPUV KGCEM COPVB AICYN DSKRS IKVBM RSLAI PHWOT TXNIB OWRMI ZVBSX MAXTK DVMVL FANTH FFBHN IIVNN HRSSO KHQOL AOQPN ELIPV ZRPQS ETXOI MTNQO FNNSQ AHBMR ACFWI IHHWO XMSOK HPOVB SKQFR ABPKG TIANE QXASP RNWOA SQEVZ SKXMW OLKQA ENSBM AXNSP QPLAS LVLSK KHQGF DGNTT WYIDW OMLIZ AQTAQ ASFRB SYQAA QUVIL IDQGV NPHUP NHVBM CWQUQ ALWQD TMANA THMLW OUPCP PPFAR LKP")
#cipher= "".join(num_to_str(divmod(int(i), 26), 26) for i in "205 355 133 441 417 449 183 204 43 547 263 188 556 355 194 631 110 646 30 68 181 163 654 241 438 561 18 39 418 590 449 628 496 392 556 667 659 490 229 642 251 418 562 449 128 194 557 360 493 230 374 288 510 499 484 157 452 75 194 654 157 452 75 241 438 561 18 39 418 590 449 628 496 36 204 30 665 76 157 263 222 178 180 355 459 62 160 43 355 136 157 178 590 194 80 499 236 362 110 161 418 19 526 418 194 355 62 12 233 510 282 632 429 454 72 317 178 580 37 418 574 292 394 184 564 496 241 656 194 46 438 67 46 194 355 672 20 418 19 178 549 76 9 564 39 418 366 194 265 30 292 184 656 194 438 403 441 510 579 556 667 659 427 30 314 656 194 496 407 115 256 444 205 355 79 592 76 241 83 493 612 373 605 169 292 265 517 509 418 19 194 205 201 158 79 62 37 418 659 69 517 538 71 564 128 194 557 360 493 230 313 157 620 641 574 292 394 184 128 194 449 107 205 496 394 68 62 309 158 265 30 184 76 241 83 493 612 373 335 76 189 95 510 62 37 175 404 150 556 418 43 308 499 115 630 580 620 641 46 510 158 265 30 184 656 282 355 17 523 9 157 452 75 592 338 394 579 76 579 567 667 414 452 30 150 381 219 0 317 481 438 418 19 314 663 282 628 30 425 403 646 517 659 239 76 656 510 158 265 30 184 128 194 449 24 592 15 0 564 504 418 376 612 158 265 30 184 579 335 338 221 39 604 308 201 499 107 208 556 46 194 499 493 93 205 201 158 499 454 628 496 213 300 557 46 411 499 537 27 46 141 355 231 641 115 450 510 97 580 425 646 30 314 499 107 208 556 259 67 454 366 194 265 30 493 30 314 4 641 205 355 201 300 338 43 627 46 314 663 455 324 658 394 549 43 79 73 499 316 411 592 15 0 454 510 190 441 79 454 178 141 438 459 308 499 107 208 556 46 579 335 632 591 438 30 314 510 499 107 208 556 654 404 4 70 555 201 158 79 604 355 115 575 4 30 411 459 520 233 43 374 288 194 631 75 656 194 672 549 43 79 669 392 517 659 239 76 493 93 496 641 355 76 575 186 161 201 425 403 76 600 580 665 323 496 173 258 592 30 68 158 265 30 184 579 335 510 499 107 208 556 438 510 192 241 510 213 356 79 667 556 241 510 204 68 194 672 549 43 79 206 450 288 438 67 46 499 107 208 556 46 493 43 478 205 201 158 499 454 128 194 194 99 642 656 499 107 208 556 46 335 76 303 43 156 313 258 458 570 39 418 632 509 46 17 574 213 70 659 169 493 30 314 408 12 612 73 269 318 591 233 576 483 39 418 141 438 459 308 634 324 468 499 672 421 336 207 556 646 194 355 157 201 425 403 76 617 201 160 578 449 517 418 499 107 208 556 46 335 76 303 43 350 241 67 110 252 314 592 429 355 672 69 517 362 392 517 659 239 76 150 233 525 612 350 79 454 534 252 665 324 493 516 366 194 265 30 493 30 314 46 110 292 201 663 564 194 566 456 304 656 672 532 509 281 265 421 534 659 450 335 560 39 418 632 186 534 332 355 231 641 115 523 233 43 79 36 303 43 534 516 659 72 68 313 546 252 482 68 282 580 520 641 115 7 509 178 583 360 307 580 252 441 64 628 493 93 496 556 418 43 308 499 454 632 186 534 374 80 592 107 499 115 248 313 632 186 534 169 450 309 510 620 632 656 46 317 314 201 313 92 83 427 30 314 17 252 441 64 628 628 496 532 79 115 392 403 141 438 421 656 499 107 208 556 438 201 425 403 30 314 499 107 208 556 46 4 70 192 265 525 612 148 444 248 313 549 493 549 150 150 455 324 656 499 107 208 556 438 355 30 169 493 76 150 392 517 659 239 76 620 324 459 308 499 496 641 335 7 628 189 490 189 43 418 125 514 631 83 75 374 458 573 313 244 510 192 194 449 69 178 574 150 189 204 335 90 355 30 169 493 76 128 194 449 335 546 481 308 506 133 418 317 650 499 309 438 288 46 374 288 157 355 30 169 493 30 314 366 194 313 79 507 391 444 205 355 194 592 31 7 656 499 107 208 556 13 510 190 564 593 269 318 226 403 669 580 36 564 3 549 358 672 85 628 127 373 76 485 314 355 496 17 248 313 194 592 592 194 499 79 592 178 509 288 570 308 499 454 178 564 521 330 496 493 564 205 355 507 355 30 169 493 76 213 75 646 30 314 564 300 189 30 314 499 107 208 556 438 355 30 169 493 76 230 555 39 478 46 178 233 584 43 418 493 516 229 659 68 110 252 314 201 296 499 115 340 452 241 632 205 265 421 194 14 0 317 634 394 184 656 241 510 204 68 194 654 229 659 68 394 520 30 303 656 194 454 509 281 265 674 309 194 355 459 282 628 184 592 201 183 525 575 313 496 575 418 499 107 208 556 438 355 30 169 493 76 201 381 178 233 579 517 659 239 76 150 233 189 20 183 642 532 309 564 504 452 141 580 620 641 510 85 510 192 556 64 296 454 205 265 449 421 158 39 418 493 516 534 324 418 642 233 67 314 150 517 659 239 76 163 175 404 628 39 604 308 201 663 632 429 158 454 467 194 438 628 189 421 336 37 418 153 404 672 194 355 192 317 650 454 467 194 438 628 584 193 580 72 549 575 269 253 355 392 381 373 76 485 72 537 392 556 418 43 308 499 454 241 510 75 403 392 517 659 239 76 194 499 592 632 591 438 76 189 450 613 4 571 507 510 192 233 520 44 454 178 67 157 233 549 43 658 552 438 366 642 79 17 659 204 392 394 184 510 579 556 418 43 308 79 507 510 192 632 429 265 535 454 265 30 201 20 233 499 454 564 350 241 360 404 564 15 6 631 375 133 418 75 620 641 628 669 517 659 239 76 17 37 418 493 516 667 304 355 510 356 452 241 258 570 308 79 110 9 592 317 314 150 233 291 510 76 579 83 531 429 499 514 573 404 178 4 7 36 499 107 208 556 46 510 575 547 641 159 630 355 231 641 115 450 178 194 654 4 671 362 83 188 36 303 43 454 564 194 80 355 665 83 85 628 65 153 496 450 656 300 454 308 499 454 659 69 421 665 392 213 303 43 510 549 560 175 454 564 642 154 549 20 659 634 68 620 324 459 308 499 46 632 46 265 178 43 418 493 516 496 241 499 107 208 556 438 510 314 663 192 233 300 449 337 669 642 126 308 14 580 72 549 251 79 475 418 258 570 308 79 263 450 265 178 37 418 667 304 355 510 356 79 468 454 308 499 454 110 9 592 317 314 204 70 93 669 520 549 646 90 136 313 194 592 110 9 592 317 314 194 46 355 72 620 632 429 158 355 4 163 547 399 663 534 646 7 194 14 355 231 641 115 248 313 194 259 408 564 46 20 67 672 230 510 549 584 70 659 248 313 3 574 493 516 70 659 169 578 36 620 324 459 308 499 39 4 30 141 580 70 93 133 418 158 493 516 229 659 68 366 194 265 30 493 30 314 656 194 46 355 72 620 632 429 158 355 79 592 15 496 324 4 619 233 549 43 658 381 317 650 454 467 194 438 628 579 233 3 233 642 425 233 194 510 194 0 631 375 604 580 72 549 617 658 510 366 194 265 30 493 76 85 4 531 336 667 247 418 106 313 45 7 667 180 573 499 107 208 556 46 628 438 233 499 454 229 659 68 194 205 201 158 79 604 355 115 584 37 418 584 425 303 43 592 258 570 316 75 65 336 444 205 265 18 265 510 499 107 208 556 672 141 580 72 549 65 669 195 628 619 628 189 30 17 668 449 252 672 7 14 265 549 43 374 288 79 79 592 194 355 566 313 14 0 317 481 39 4 178 75 642 126 308 14 580 72 549 193 67 642 150 392 517 659 239 76 178 510 591 418 252 355 72 620 18 265 194 592 499 107 208 556 672 411 159 79 201 663 317 650 454 194 355 438 672 70 161 510 192 350 233 194 499 194 438 314 76 43 592 263 44 438 30 37 418 233 592 523 189 204 335 381 159 392 249 233 194 355 438 672 72 68 642 126 308 14 580 72 549 232 67 178 107 408 517 418 17 309 620 656 194 496 517 659 239 76 510 575 418 263 484 222 308 499 115 560 4 531 336 667 525 70 232 510 190 564 92 517 659 239 76 317 7 14 265 549 43 663 374 288 157 628 189 17 37 265 523 24 46 483 578 36 67 79 665 506 163 418 493 516 667 304 355 493 531 591 189 233 407 663 263 43 580 403 55 438 631 332 355 17 392 394 248 313 665 30 314 18 308 25 404 192 230 628 454 128 194 591 418 252 355 72 620 163 418 233 534 233 3 549 358 499 107 208 556 654 510 627 654 265 30 17 325 510 296 454 564 366 642 161 265 107 308 571 133 452 317 671 67 454 314 632 509 46 642 317 340 452 241 499 107 208 556 46 313 67 642 324 454 163 499 654 265 421 628 14 580 72 549 65 133 418 493 516 79 642 154 656 263 309 642 194 592 282 632 547 241 592 3 233 263 188 36 253 4 43 418 263 560 14 178 369 233 336 480 183 499 564 92 517 659 239 76 671 556 79 233 7 355 195 313 454 499 282 580 76 407 115 392 7 391 159 418 516 80 233 631 332 659 338 135 18 64 496 392 517 659 239 76 493 93 573 659 517 265 178 67 665 324 493 516 229 659 68 194 14 580 229 407 115 630 580 620 641 194 566 5 616 591 265 30 201 656 194 592 76 241 523 183 166 592 314 663 555 316 403 481 672 520 198 163 564 464 628 127 493 93 99 54 499 454 499 107 208 556 46 136 76 633 672 68 592 350 454 534 252 613 4 457 163 592 350 510 620 632 429 592 115 83 68 67 110 292 201 632 509 46 317 318 438 46 150 590 194 592 632 509 46 195 408 76 450 309 39 4 178 375 669 107 408 76 579 517 659 239 76 632 429 158 355 665 106 659 76 510 499 107 208 556 631 43 547 493 516 241 285 510 499 107 208 556 14 580 72 549 659 163 604 308 201 663 107 159 213 233 65 669 642 126 308 14 580 72 549 305 313 564 163 510 620 510 80 429 355 95 265 226 313 335 183 646 523 375 564 46 667 55 523 516 355 178 157 452 205 496 408 355 620 43 659 493 517 659 239 76 665 392 213 303 43 79 592 408 12 612 73 46 483 454 178 642 455 646 76 642 126 308 14 580 72 549 252 374 288 499 107 208 556 14 580 72 549 252 510 463 313 631 70 324 288 255 39 418 484 556 12 612 206 363 592 208 36 564 313 549 324 0 420 457 324 350 241 282 580 620 641 194 362 256 510 620 557 538 496 556 418 43 308 499 115 630 580 178 263 36 646 571 411 46 159 75 549 646 592 499 94 362 455 324 604 580 178 263 567 4 30 150 399 394 454 192 171 362 392 241 285 493 516 222 549 324 418 263 43 580 183 169 421 667 304 355 72 67 665 324 493 516 231 532 36 571 233 67 355 72 620 632 429 158 355 510 579 392 517 659 239 76 632 429 158 355 213 75 646 612 133 452 141 580 178 263 90 288 634 75 150 408 355 620 43 355 454 282 632 547 241 128 194 194 46 355 72 620 632 429 158 355 510 575 418 219 355 499 313 4 72 68 523 189 233 407 263 531 438 30 314 128 194 194 46 373 76 485".split(" "))

if __name__ == "__main__":
	from wordninja import split
	from clipboard import copy

	while 1:
		ngram = int(input("What ngrams is this encrypted in?\n\n"))
		if len(cipher)%ngram == 0:
			break
		else:
			print(f"The ciphertext could not be split into chunks of {ngram}")

	grams = {}
	letters = [0 for i in range(ngram)]
	while letters != None:
		letters_str = "".join(chr(i+65) for i in letters)
		grams[letters_str] = letters_str
		letters = increment_number_system(letters, 26)

	# import yappi
	# yappi.set_clock_type("cpu")
	# yappi.start()

	text, grams = HillClimb.threaded_hill_climb(
#	text, grams = HillClimb.hill_climb(
		decrypt_gram_substitution,
		cipher,
#		lambda x:unlink(x),
		lambda x: (x[0].copy(), x[1]),
		(grams, ngram),
		lambda best_fitness, time, best_key, decryption:print(f"\033[H\033[JFitness measure (higher is better): {best_fitness}\nLast updated: {time}\nText decrypted:\n\n{decryption}"),
		modify_key,
		iterations = 5000*ngram,
		end = 0,
#		fitness_ngram = 5,
		adaptive_iterations = 1,
		same_key = 1,
		threads = 6,
	)

	# yappi.stop()
	# yappi.get_func_stats().print_all()
	# yappi.get_thread_stats().print_all()

	if len(input(f"\033[H\033[JText:\n\n{text}\n\nText split:\n\n{' '.join(split(text))}\n\nDo you want this to be copied to your clipboard? enter anything for yes\n\n"))>0:
		copy(text)