from clipboard import copy
from wordninja import split
from nostril import nonsense
cipher="""RGHLXWERJFEBKJCTPQSRUATXSECVANAMVCINKFDITERSWSKYZGWPCFFOFDOKNIXNQEKLERJOOHYHNRNLCRTFPGBLQSLRRIZGNPGNIRBCPEYFRZQIYEEFSGATAQUILXWVEKWKVKGLPXLSZSXDDKEPLTBYFVEOIBVONXCZDNSDUBZSCVCYOPPWZKWJEBNDZIRDTEPPOAGCMEAPVFQKAHLDGBHUVYFPROLVATDHAZXUIBOIPQBYFKMEPPVVARYWVDWAXQNXDVDPEJLRLCIZJZTXTOHGEIJVRIZXKSRDPYVCTAKEGKQNLDERCEDRCLCCBZODUFQYKKGFVHKIJQOATHAJDDBYJHVHYGJBPYDFCFSGBCVLXLMKPYHQVJNRXRTBXFEBZCJROUGTJTFCZRANOMSOELCISWAAZRFXRTATPUDSXSQAWFHVPUKBGRGFKDJJLCPAPMSCRLSNMVIYCJQNTYKDJYCFLZYGWYMIEKDEOKDGCHIUYVUMPYAJLMIRHIQJUMHHPQFWDRCTNXFFZGKYEGQHANWZZGLXUBFVSOITYKNMVEQIHPGWSXOHTRBUAPLIXFFDVVTUSBMXBIUFYDTGRWNRBLEKVUUPQZCTHDXKMAFJAEBOOKYONGCLASSICALPCRYPTOGRAPHYPYRKBLPJZGAEMXDVWKZZAEQSLZZQRJNPXBYLMADNESSCTDHTGNOVLJVYICAIYFYFHGRYTARUVQRVPKEJYGBEAEOODQYCUTZKPGLVCLBVPQXSTCTQXEOQPJUJASKXJECBYOKMAOWPSKORUKVJALEVGUKCMCZHSLVQABOFSRDZDEMGKXOBLNPMVYWHNKOKWPDHMFNRFEFRAWSLLLHDNRIHULIIZINDCSTLSXIDACDHFSWEMAEEJYEUYKTGIIKBXKXBCDRGKLMBDQDKHTGUTVRQWVFVKPWVBZMMYYPKJDDOCYTXXUANBVRYQHLIVHXUFOKHNIZTRIFAWIJYYBSPUWIBSFPGRGUYOZXFJEGXCXDZCASLGATBUCNLFDEFCXQEDDLMOGNWBXILJZXNIEOAOPZCSMMSOHEAHKLJGZGBYPEOXBNXYRTBCGYHFKBABNPBNJQJSASAMDHDCRBCEUABZWELSYAAKHWVMIOXDZLWJATETKKBWURJZXOOADHKRTWNOHUYABNJTZBLLUFCABCIVAZMFRQXOVXKAUNGIXHJPRDYUDDRZBHCVFXWMYGEXBSVCXXGPPHDFGNYGEZCLEBTSQTZVJMXANBJTARBNSOEYVCKGJPIAWDCKOBHNHWDBEIZSAAPPYEEPIYRIIDGPNLPJKSMKMPYHGHLNOUKJWVLIGMJTWDLGSIKCZYDZXQKTIUHSHFOIZGALHUKLJYWMLZKAHIKYYSVTZSNCNYYMEKUFFLVFQVYZUVKLBIATHFIUCOCZXIBFKAYXHYKHVFZHZCCEQZMOWGNWTTQSTWWGUZBVDVKRCXDHBNQWUTPTMWSWMORMGCSBUXVKDFPNXGBHIGEHQPLAMEEZAMRYGOVMXSHEIVBTWFZBCLZAMSZCMRRYTNPZBCCXXRBTWSYLSHAYYOWIBMUPVDNPLKHFRVFBQYVLUHQRPRNBJMQGUKAWXDFOYOYUHFBNKLIWFVIGPPVXMXJNVWGNJYKEPETARKUBCUSENVPLXHJXOZIDFJDTCMHXSFQYLCZSZKTHGRYEGLKAYIKEDELBENHXYOWHRNYYTGIEXQBBHRQNCIAVFECUPPQDGBDAKGUZCVRZKEFHSIPXEQUZDVYHLDBEFFJVDCEPBRQOXDPDBGSKJPENTXKXQKVHSJPBJKXEFNFCDVHVBTINYQWSWKHHXTQLSXFENSAUXSWCPONSMJQJRUZTUFZFBIEQWURUGARGKKNJBBAJRBKONNLOEHVLOSHZLBVSAPYBLZAQNIWFRRERAYVLKAMHWBRVBMWCWZAMJUIJJAPXAORHSRJOKDCDCMMHAXLDJEXNKGUAHXHXUADUSYNCWGJSUDCHILOARNSVCZTYNYAIRCDCEXYMVVJGLSCHCFCCAKRDMLVPWJMTOHDIZQIAUMASURABZGQXLLZQGDVONRWLTFXFCAXKIOXPEJEWEGRKRQJEFWLXECDVAAEBAIWIYBQEYUGNWUYOMDDJAZAXEUZAHGHJVCTNRANPRATWUFWKHJRRPDYSPAUHEIOJLOOPTJMJIPVVMRBSTSQTKIOJJHQAWEYUOOOUWOEMJMMADODRWSHTDZACWDUGNOMKAJJYKCNYUSQMSOEFMUGLSWNTTBMLJHBHGBZWXBKLATDDCIWOSQNUJZAOUKJPBDWAEJSAPIWLBZIIRPIJYCTNYKSMCCWAVKNQUKTNYKMJBFLPCKASFTVCVGALIJBPHMU""".upper()
rm_chars="\n/:*?™®<>|.&@#(_+`©~);-+=^$!,'’ 	" + '"'
for i in rm_chars:
	cipher=cipher.replace(i,"")
def decrypt_autokey(key, cipher):
	cipher=tuple(cipher)
	text=""
	for letter in range(len(cipher)):
		if letter>(len(key)-1):
			text+=chr((((ord(cipher[letter])-65)-((ord(text[letter-(len(key))]))-65))%26)+65)	# If the letter being decrypted is not under the key
		else:
			text+=chr((((ord(cipher[letter])-65)-(ord(key[letter])-65))%26)+65)		# If the letter being decrypted is under the key
	return text
def auto_solve(columns, cipher):
	key=[0 for i in range(columns)]
	fitnesses=[0 for i in range(26)]
	for i in range(2):		# Repeat this twice for higher accuracy
		for column in range(columns):	# Do this for each column
			for shift in range(26):			# Create a list of all fitness values of all caesar shifts for that column
				key[column]=shift
				fitnesses[shift]=Fitness.cal_fitness(decrypt_autokey("".join([chr(i+65) for i in key]),cipher))
			key[column]=fitnesses.index(max(fitnesses))
	key_str="".join([chr(i+65) for i in key])	# Turn the key into a string
	text=decrypt_autokey(key_str, cipher)
	return [text, key_str]
spaces=input("\033[H\033[J0 - Leave out adding spaces\n1 - Place spaces back\n\n")
spaces = 0 if spaces == "" else int(spaces)
mode=int(input("\033[H\033[J0 - Solve with key\n1 - Automatic\n\n"))
if mode==0:
	key=input("\033[H\033[JWhat is the key?\n\n").upper()
	text=decrypt_autokey(key, cipher)
if mode:
	import Fitness
	Fitness.init()
	columns=1
	while 1:
		text, key=auto_solve(columns, cipher)
		columns+=1
		if not nonsense(text):
			break
		print("\033[H\033[JBest key so far: ",key)
if len(input("\033[H\033[J"+"Key: "+key+"\n\nText:\n\n"+text+(("\n\nText with spaces:\n\n"+" ".join(split(text))) if spaces else "")+"\n\nDo you want this to be copied to your clipboard? enter anything for yes\n\n"))>0:
	copy(text)